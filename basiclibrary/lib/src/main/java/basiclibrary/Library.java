/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.lang.reflect.Array;
import java.util.*;

public class Library {


    //roll dice

    public static ArrayList<Integer> roll(int numberOfRolls){

        ArrayList <Integer> rolledDice= new ArrayList<>();
        int max = 6;
        int min = 1;
        int range = max - min + 1;

        // generate random numbers within 1 to 6
        for (int i = 0; i < numberOfRolls; i++) {
            int rand = (int)(Math.random() * range) + min;
            rolledDice.add(rand);
            // Output is different everytime this code is executed
                  }

        return rolledDice;
    }
    // Contains Duplicates
    public static boolean containsDuplicates(int findDuplicatesInMe []){
    
        boolean flag= false;
        //loop through the array and check fo dublicates
        for (int i =0; i< findDuplicatesInMe.length;i++) {

            for (int j =i; j< findDuplicatesInMe.length;j++) {
                if(findDuplicatesInMe[i] == findDuplicatesInMe[j] && i !=j ){
                    flag=true;
                    //System.out.println(findDuplicatesInMe[i]);
                }
            }

        }

    // return the value of the flag if its contains true then there is a duplicates other wise false
        return flag;
    }
    // Calculate Averages
    public static float calculateAverages(int arrayOfNumbers []){
        float total=0;
    //loop through the numbers
        for (int value: arrayOfNumbers) {
            total +=value;
        }

        //return the avg
      return total/arrayOfNumbers.length;



    }

    // calculate Averages Of Weekly Lowest Month Temperature
    public static int[] calculateAveragesOfWeeklyLowestMonthTemperature(int[][] temperature ){
        int total=0;
        int[] arrayOfLowestTemperature;
        ArrayList<Integer> averages= new ArrayList<>();

        //loop through the temperature per each week

       for(int i=0;i<temperature.length;i++){
           for(int j=0;j < temperature[i].length;j++){
               total+=temperature[i][j];
           }
           // calculate the avg
           averages.add(total/temperature[i].length);

           total=0;
       }
       //loop and find  the lowest temperature of a week in a month

        int minValue=averages.get(0);
        int minValueIndex=0;
        for(int i=0;i<averages.size();++i){
            if(averages.get(i) < minValue){
                minValue=averages.get(i);
                minValueIndex = averages.indexOf(averages.get(i));
            }
        }

        arrayOfLowestTemperature= temperature[minValueIndex];

       return arrayOfLowestTemperature;

    }

    public static String analyzingWeatherData (int[][] temperature) {

        Set<Integer> TempSet = new HashSet<Integer>();

        int highestTemp=0;
        int lowestTemp=10000;
        int notShownTemp=0;

        String Temps=new String();

        // setting the values in Hashset  and remove the duplicates
        for(int i=0;i<temperature.length;i++){
            for(int j=0;j < temperature[i].length;j++){
                TempSet.add(temperature[i][j]);
            }
        }

        //filtering the values highest,and lowest
        for(Integer item1: TempSet){
              if(highestTemp<item1){
                  highestTemp=item1;
              }

              if(lowestTemp>item1){
                  lowestTemp=item1;
              }
        }

        Temps+= "High: "+highestTemp+"\n";
        Temps+= "Low: "+lowestTemp+"\n";

        //filtering the  never seen temps
        for(int i = lowestTemp;i<highestTemp;++i){
            if (!TempSet.contains(i)) {
                Temps+="Never saw temperature: "+ i+"\n";
            }
        }

       // System.out.println(Temps);
        return Temps;
    }

    public static String tally(List<String> votes){

        HashMap<String ,Integer> votesList = new HashMap<>();

        for(String item: votes){
            if(votesList.containsKey(item))
                 votesList.put(item.toString(), votesList.get(item).intValue() +1);
            else{
                votesList.put(item.toString(), 1);
            }
        }

        String maxVotes="Unknown";

        int value = 0;

        for(Map.Entry item : votesList.entrySet()) {
            if (((Integer) item.getValue()) > value) {
                value = ((Integer) item.getValue());
                maxVotes = ((String) item.getKey());
            }
        }

        //System.out.println(maxVotes);
        return maxVotes;
    }


}
